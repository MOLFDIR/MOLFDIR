C
C     ===================
      SUBROUTINE MFDBREIT(DAAR,DBAR,DAAI,DBAI,DOAAR,DOBAR,DOAAI,
     +              DOBAI,DOACR,DOBCR,DOACI,DOBCI,FAAR,FBAR,FAAI,FBAI,
     +            FOAAR,FOBAR,FOAAI,FOBAI,FOACR,FOBCR,FOACI,FOBCI,SC1)
C     ===================
      IMPLICIT REAL*8 (A-H, O-Z)
C
C     BUILD THE SKELETON BREIT-MATRIX FROM LIST OF INTEGRALS AND LABELS
C     BREIT: IF .TRUE. BREIT MATRIX IS ADDED TO THE FOCK-MATRIX
C            IF .FALSE. SEPARATE BREIT MATRIX BUILT IN SPACE OF FOCK MATRIX
C
C     COMMON/DMT/: ON ENTRY CLOSED SHELL DENSITY MATRIX (DAAR)
C     COMMON/FMT/: ON EXIT CLOSED SHELL INCOMPLETE FOCK/BREIT MATRIX (FAAR)
C                   OPEN SHELL NR.1
C     COMMON/DOMT/: ON ENTRY OPEN SHELL DENSITY MATRIX (DOAAR)
C     COMMON/FOMT/: ON EXIT OPEN SHELL INCOMPLETE FOCK/BREIT MATRIX (FOAAR)
C                   OPEN SHELL NR.2
C     COMMON/DOMT/: ON ENTRY OPEN SHELL DENSITY MATRIX (DOACR)
C     COMMON/FOMT/: ON EXIT OPEN SHELL INCOMPLETE FOCK/BREIT MATRIX (FOACR)
C
C     OPENSH: .TRUE. IF OPEN SHELL CALCULATION
C
C
      INCLUDE 'paracom.inc'
      INCLUDE 'general.inc'
      INCLUDE 'memory.inc'
      INCLUDE 'mpif.h'
      INCLUDE 'mpidef.inc'
C
      COMMON/INT/ RINT(N2)
#if defined (BIT64)
      COMMON/LAB/ LABEL(N2)
#else
      COMMON/LAB/ LABEL(N2), LABEL1(N2)
#endif
C
      REAL*8 DAAR(*),DBAR(*),DAAI(*),DBAI(*)
      REAL*8 DOAAR(*),DOBAR(*),DOAAI(*),DOBAI(*)
      REAL*8 DOACR(*),DOBCR(*),DOACI(*),DOBCI(*)
      REAL*8 FAAR(*),FBAR(*),FAAI(*),FBAI(*)
      REAL*8 FOAAR(*),FOBAR(*),FOAAI(*),FOBAI(*)
      REAL*8 FOACR(*),FOBCR(*),FOACI(*),FOBCI(*)
      REAL*8 SC1(*)
C
      DIMENSION ILAB ( N2 ) , JLAB ( N2 ) , KLAB ( N2 ) , LLAB ( N2 )
      DIMENSION ISTAT(MPI_STATUS_SIZE)
      LOGICAL READY
      LOGICAL ISOS
C
#if defined (BIT64)
      DATA MASK /Z"000000000000FFFF"/
#else
      DATA MASK /"0000FFFF"X/
#endif
      SAVE MASK
C
      ISOS = OPENSH
C
C     LINUX DOESN'T LIKE REDUCING WITH THE SAME ARRAYS
C
      DO 4 IV = 1, LENGTH
      SC1 (IV) =0.0D0
    4 CONTINUE
C
      IF (.NOT.BREIT) THEN
C
C     ------------------------------------
C     CORRECTION IS ADDED AS A PERTUBATION
C     INITIALIZE BREIT MATRIX ELEMENTS
C     ------------------------------------
C
      DO 5 IV = 1, LENGTH
      FAAR (IV) = 0.0D0
      FAAI (IV) = 0.0D0
      FBAR (IV) = 0.0D0
      FBAI (IV) = 0.0D0
      FOAAR (IV) = 0.0D0
      FOAAI (IV) = 0.0D0
      FOBAR (IV) = 0.0D0
      FOBAI (IV) = 0.0D0
    5 CONTINUE
      IF (ISOS.AND.NOPEN.GT.1) THEN
      DO 6 IV = 1, LENGTH
      FOACR (IV) = 0.0D0
      FOACI (IV) = 0.0D0
      FOBCR (IV) = 0.0D0
      FOBCI (IV) = 0.0D0
    6 CONTINUE
      ENDIF
      ENDIF
C
C     ---------------------
C     CALL NODES TO DO FOCK
C     ---------------------
C
      IDOIT=2
      DO I=1,mpisiz
         CALL MPI_SEND(IDOIT,1,MPI_INTEGER,I,16,
     &                 MPI_COMM_WORLD,IERR)
      ENDDO
C
C     --------------------------------------------
C     SEND SLAVES A COPY OF THE DENSITY MATRIX/CES
C     --------------------------------------------
C
      IF (.NOT.BREIT) THEN
      CALL MPI_BCAST(DAAR,LENGTH,MPI_DOUBLE_PRECISION,0,
     &               MPI_COMM_WORLD,IERR)
      CALL MPI_BCAST(DAAI,LENGTH,MPI_DOUBLE_PRECISION,0,
     &               MPI_COMM_WORLD,IERR)
      CALL MPI_BCAST(DBAR,LENGTH,MPI_DOUBLE_PRECISION,0,
     &               MPI_COMM_WORLD,IERR)
      CALL MPI_BCAST(DBAI,LENGTH,MPI_DOUBLE_PRECISION,0,
     &               MPI_COMM_WORLD,IERR)
      IF (ISOS) THEN
          CALL MPI_BCAST(DOAAR,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
          CALL MPI_BCAST(DOAAI,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
          CALL MPI_BCAST(DOBAR,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
          CALL MPI_BCAST(DOBAI,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
      ENDIF
      IF (NOPEN.GT.1) THEN
          CALL MPI_BCAST(DOACR,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
          CALL MPI_BCAST(DOACI,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
          CALL MPI_BCAST(DOBCR,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
          CALL MPI_BCAST(DOBCI,LENGTH,MPI_DOUBLE_PRECISION,0,
     &                   MPI_COMM_WORLD,IERR)
      ENDIF
      ENDIF
C
C     ----------------------------------------
C     WAIT FOR ALL SLAVES TO FINISH THEIR WORK
C     ----------------------------------------
C
      DO I=1,mpisiz
         CALL MPI_RECV(NODE,1,MPI_INTEGER,MPI_ANY_SOURCE,18,
     &                 MPI_COMM_WORLD,ISTAT,IERR)
      ENDDO
      IGSUM=3
      DO I=1,mpisiz
         CALL MPI_SEND(IGSUM,1,MPI_INTEGER,I,19,
     &                 MPI_COMM_WORLD,IERR)
      ENDDO
C
C     ------------------------------------
C     DO A GLOBAL SUM OF THE FOCK MATRICES
C     ------------------------------------
C
      CALL MPI_REDUCE(SC1,FAAR,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FAAI,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FBAR,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FBAI,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      IF (ISOS) THEN
      CALL MPI_REDUCE(SC1,FOAAR,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FOAAI,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FOBAR,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FOBAI,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      ENDIF
      IF (NOPEN.GT.1) THEN
      CALL MPI_REDUCE(SC1,FOACR,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FOACI,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FOBCR,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      CALL MPI_REDUCE(SC1,FOBCI,LENGTH,MPI_DOUBLE_PRECISION,
     &                MPI_SUM,0,MPI_COMM_WORLD,IERR)
      ENDIF
      RETURN
      END
