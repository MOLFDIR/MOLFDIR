C
      SUBROUTINE POPLE(DC,DO,DOC,FC,FO,FOC,SC1,SC2,SC3,SPC)
      IMPLICIT REAL*8 (A-H,O-Z)
C
C === THIS SUBROUTINE PERFORMS THE 3/4 POINT EXTRAPOLATION METHOD DUE TO POPLE
C
      INCLUDE 'paracom.inc'
      INCLUDE 'general.inc'
C
      COMMON/POEX/SP11,SP12,SP22,SP13,SP23,SP33
      REAL*8 SP11,SP12,SP22,SP13,SP23,SP33,SPC
C
      COMPLEX*16 DC(*),DO(*),FC(*),FO(*),SC1(*),SC2(*)
      COMPLEX*16 DOC(*),FOC(*),SC3(*)
C
      COMPLEX*16 CMULC
C
C === COMPUTE THE VALUES RELATED TO THE PREVIOUS ITERATIONS
C
      IPOINT = IPOINT + 1
      IF (IPOINT .LT. 2) GOTO 9999
      IF (IPOINT .GE. 4) THEN
      SP33 = SP22
      SP23 = SP12
      SP22 = SP11
      SP11 = SPC
      ELSEIF (IPOINT .EQ. 3) THEN
      SP22 = SP11
      SP11 = SPC
      ELSE
      SP11 = SPC
      ENDIF
C
C === COMPUTE THE VALUES RELATING TO THE CURRENT ITERATION
C
      IF (IPOINT .LT. 3) GOTO 9999
      SP12 = 0D0
C === IN DC AN DO WE STILL HAVE D(N) - D(N-1)
C === IN FC AND FO WE HAVE D(N-1)
C === READ IN D(N-2) IN SC1 AND SC2
      ICTC = 1
      ICTO = 1
      ICTO2 = 1
      IRECP = IRECDP - 1
      IF (IRECP .LT. 1) IRECP = N29
      DO 100 IRP = 1, NSYMRP
      NBS = NBSIM (IRP) * (NBSIM (IRP) + 1) / 2
      IF (NCL(IRP) .NE. 0) THEN
      CALL RDENS(IRECP,SC1(ICTC),NBS,IRP,1)
      ICTC = ICTC + NBS
      ENDIF
      IF (NOP(IRP,1) .NE. 0) THEN
      CALL RDENS(IRECP,SC2(ICTO),NBS,IRP,2)
      ICTO = ICTO + NBS
      ENDIF
      IF (NOP(IRP,2) .NE. 0) THEN
      CALL RDENS(IRECP,SC3(ICTO2),NBS,IRP,3)
      ICTO2 = ICTO2 + NBS
      ENDIF
  100 CONTINUE
C === COMPUTE D(N-1) - D(N-2) AND STORE IT IN FC AND FO
#if defined (BIT64)
      CALL CAXPY(NBHTC,(-1.0E0,0.0E0),SC1,1,FC,1)
      CALL CAXPY(NBHTO,(-1.0E0,0.0E0),SC2,1,FO,1)
      CALL CAXPY(NBHTO2,(-1.0E0,0.0E0),SC3,1,FOC,1)
#else
      CALL ZAXPY(NBHTC,(-1.0D0,0.0D0),SC1,1,FC,1)
      CALL ZAXPY(NBHTO,(-1.0D0,0.0D0),SC2,1,FO,1)
      CALL ZAXPY(NBHTO2,(-1.0D0,0.0D0),SC3,1,FOC,1)
#endif
      IOFSC = 0
      IOFSO = 0
      IOFSO2= 0
      DO 130 IRP = 1, NSYMRP
      NB = NBSIM(IRP)
      NBH = NB * (NB + 1) / 2
      IF (NCL(IRP) .NE. 0) THEN
      SP12 = SP12 + TRC(FC(IOFSC+1),DC(IOFSC+1),NBH,NB)
      IOFSC = IOFSC + NBH
      ENDIF
      IF (NOP(IRP,1) .NE. 0) THEN
      SP12 = SP12 + TRC(FO(IOFSO+1),DO(IOFSO+1),NBH,NB)
      IOFSO = IOFSO + NBH
      ENDIF
      IF (NOP(IRP,2) .NE. 0) THEN
      SP12 = SP12 + TRC(FOC(IOFSO2+1),DOC(IOFSO2+1),NBH,NB)
      IOFSO2 = IOFSO2 + NBH
      ENDIF
  130 CONTINUE
      IF (IPOINT .LT. 4) GOTO 9999
C === IN DC AND DO AND DOC WE HAVE D(N) - D(N-1)
C === IN FC AND FO AND FOC WE HAVE D(N-1) - D(N-2)
C === IN SC1 AND SC2 AND SC3 WE HAVE D(N-2)
C === READ IN D(N-3) IN FC AND FO AND FOC
      ICTC = 1
      ICTO = 1
      ICTO2= 1
      IRECP = IRECP - 1
      IF (IRECP .LT. 1) IRECP = N29
      DO 200 IRP = 1, NSYMRP
      NBS = NBSIM (IRP) * (NBSIM (IRP) + 1) / 2
      IF (NCL(IRP) .NE. 0) THEN
      CALL RDENS(IRECP,FC(ICTC),NBS,IRP,1)
      ICTC = ICTC + NBS
      ENDIF
      IF (NOP(IRP,1) .NE. 0) THEN
      CALL RDENS(IRECP,FO(ICTO),NBS,IRP,2)
      ICTO = ICTO + NBS
      ENDIF
      IF (NOP(IRP,2) .NE. 0) THEN
      CALL RDENS(IRECP,FOC(ICTO2),NBS,IRP,3)
      ICTO2 = ICTO2 + NBS
      ENDIF
  200 CONTINUE
C === COMPUTE D(N-2) - D(N-3) AND STORE IT IN SC1 AND SC2 AND SC3
#if defined (BIT64)
      CALL CAXPY(NBHTC,(-1.0E0,0.0E0),FC,1,SC1,1)
      CALL CAXPY(NBHTO,(-1.0E0,0.0E0),FO,1,SC2,1)
      CALL CAXPY(NBHTO2,(-1.0E0,0.0E0),FOC,1,SC3,1)
#else
      CALL ZAXPY(NBHTC,(-1.0D0,0.0D0),FC,1,SC1,1)
      CALL ZAXPY(NBHTO,(-1.0D0,0.0D0),FO,1,SC2,1)
      CALL ZAXPY(NBHTO2,(-1.0D0,0.0D0),FOC,1,SC3,1)
#endif
      IOFSC = 0
      IOFSO = 0
      IOFSO2= 0
      SP13 = 0D0
      DO 230 IRP = 1, NSYMRP
      NB = NBSIM(IRP)
      NBH = NB * (NB + 1) / 2
      IF (NCL(IRP) .NE. 0) THEN
      SP13 = SP13 + TRC(SC1(IOFSC+1),DC(IOFSC+1),NBH,NB)
      IOFSC = IOFSC + NBH
      ENDIF
      IF (NOP(IRP,1) .NE. 0) THEN
      SP13 = SP13 + TRC(SC2(IOFSO+1),DO(IOFSO+1),NBH,NB)
      IOFSO = IOFSO + NBH
      ENDIF
      IF (NOP(IRP,2) .NE. 0) THEN
      SP13 = SP13 + TRC(SC3(IOFSO2+1),DOC(IOFSO2+1),NBH,NB)
      IOFSO2 = IOFSO2 + NBH
      ENDIF
  230 CONTINUE
C
C === NOW WE HAVE COMPUTED EVERYTHING WE NEED
C === WE WILL EXTRAPOLATE EVERY FOURTH CYCLE IF POSSIBLE
C
C === FIND DISPLACEMENTS DP1, DP2 AND DP3
#if defined (BIT64)
      DP1 = SQRT(SP11)
      DP2 = SQRT(SP22)
      DP3 = SQRT(SP33)
#else
      DP1 = DSQRT(SP11)
      DP2 = DSQRT(SP22)
      DP3 = DSQRT(SP33)
#endif
C === FIND COSINE OF ANGLE BETWEEN SUCCESIVE DISPLACEMENTS
      DENOM = DP1 * DP2
#if defined (BIT64)
      IF (ABS(DENOM) .LT. 1.0E-15) GOTO 9999
#else
      IF (DABS(DENOM) .LT. 1.0D-15) GOTO 9999
#endif
      COSPHI = SP12 / DENOM
C === FIND COSINE OF ANGLE BETWEEN DP3 AND PLANE OD DP1 AND DP2
      Z = SP11 * SP22 - SP12 * SP12
#if defined (BIT64)
      IF (ABS(Z) .LT. 1.0E-15) GOTO 9999
#else
      IF (DABS(Z) .LT. 1.0D-15) GOTO 9999
#endif
      X = (SP13 * SP22 - SP12 * SP23) / Z
      Y = (SP23 * SP11 - SP12 * SP13) / Z
#if defined (BIT64)
      COSPSI = SQRT(X*X*SP11 + Y*Y*SP22 + 2*X*Y*SP12) / DP3
#else
      COSPSI = DSQRT(X*X*SP11 + Y*Y*SP22 + 2*X*Y*SP12) / DP3
#endif
C === DO NOT EXTRAPOLATE UNLESS 4 CONSECUTIVE POINTS ARE NEARLY COPLANAR
#if defined (BIT64)
      IF (ABS(COSPSI) .LE. 0.99) GOTO 9999
#else
      IF (DABS(COSPSI) .LE. 0.99D0) GOTO 9999
#endif
C === EXPRESS VECTOR DP1 AS X*DP3(PROJECTED)+Y*DP2
      Y = -Y / X
      X = 1 / X
C === CHECK IF 2 * 2 MATRIX HAS REAL EIGEN VALUES BETWEEN -.95 AND .95
      XY = Y * Y + 4 * X * X
      IF (XY .LT. 0D0) GOTO 350
#if defined (BIT64)
      XY = SQRT(XY) + ABS(Y)
      IF (ABS(XY) .LE. 1.9) GOTO 300
#else
      XY = DSQRT(XY) + DABS(Y)
      IF (DABS(XY) .LE. 1.9D0) GOTO 300
#endif
C === THE 4 POINT EXTRAPOLATION IS NOT POSSIBLE, TRY THE 3 POINT ONE
  350 CONTINUE
#if defined (BIT64)
      IF (ABS(COSPHI) .LE. 0.995) GOTO 9999
#else
      IF (DABS(COSPHI) .LE. 0.995D0) GOTO 9999
#endif
      X = DP1 / (DP2 * COSPHI - DP1)
      YYY = X
      ITYPE = 3
      GOTO 400
  300 CONTINUE
C === WE NOW GET TO THE 4 POINT EXTRAPOLATION
      XXX = X / (1 - X - Y)
      YYY = (X + Y) / (1 - X - Y)
      ITYPE = 4 
  400 CONTINUE
C
C === PRODUCE THE NEW EXTRAPOLATED DENSITY
C === WE START WITH D(N) = D(N) + YYY * (D(N) - D(N-1))
C === IN DC AND DO AND DOC WE STILL HAVE D(N) - D(N-1)
C === READ D(N) INTO SC1 AND SC2 AND SC3
      ICTC = 1
      ICTO = 1
      ICTO2 = 1
      DO 410 IRP = 1, NSYMRP
      NBS = NBSIM (IRP) * (NBSIM (IRP) + 1) / 2
      IF (NCL(IRP) .NE. 0) THEN
      CALL RDENS(IRECDC,SC1(ICTC),NBS,IRP,1)
      ICTC = ICTC + NBS
      ENDIF
      IF (NOP(IRP,1) .NE. 0) THEN
      CALL RDENS(IRECDC,SC2(ICTO),NBS,IRP,2)
      ICTO = ICTO + NBS
      ENDIF
      IF (NOP(IRP,2) .NE. 0) THEN
      CALL RDENS(IRECDC,SC3(ICTO2),NBS,IRP,3)
      ICTO2 = ICTO2 + NBS
      ENDIF
  410 CONTINUE
C === AND COMPUTE THE NEW DENSITY IN SC1 AND SC2 AND SC3
      CMULC = YYY
#if defined (BIT64)
      CALL CAXPY(NBHTC,CMULC,DC,1,SC1,1)
      CALL CAXPY(NBHTO,CMULC,DO,1,SC2,1)
      CALL CAXPY(NBHTO2,CMULC,DOC,1,SC3,1)
#else
      CALL ZAXPY(NBHTC,CMULC,DC,1,SC1,1)
      CALL ZAXPY(NBHTO,CMULC,DO,1,SC2,1)
      CALL ZAXPY(NBHTO2,CMULC,DOC,1,SC3,1)
#endif
C
      IF (ITYPE .EQ. 4) THEN
C === READ D(N-1) INTO DC AND DO AND DOC
C === AND D(N-2) INTO FC AND FO AND FOC
      ICTC = 1
      ICTO = 1 
      ICTO2= 1
      IRECP = IRECDP - 1
      IF (IRECP .LT. 1) IRECP = N29
      DO 500 IRP = 1, NSYMRP
      NBS = NBSIM (IRP) * (NBSIM (IRP) + 1) / 2
      IF (NCL(IRP) .NE. 0) THEN
      CALL RDENS(IRECDP,DC(ICTC),NBS,IRP,1)
      CALL RDENS(IRECP,FC(ICTC),NBS,IRP,1)
      ICTC = ICTC + NBS
      ENDIF
      IF (NOP(IRP,1) .NE. 0) THEN
      CALL RDENS(IRECDC,DO(ICTO),NBS,IRP,2)
      CALL RDENS(IRECP,FO(ICTC),NBS,IRP,2)
      ICTO = ICTO + NBS
      ENDIF
      IF (NOP(IRP,2) .NE. 0) THEN
      CALL RDENS(IRECDC,DOC(ICTO2),NBS,IRP,3)
      CALL RDENS(IRECP,FOC(ICTC),NBS,IRP,3)
      ICTO2 = ICTO2 + NBS
      ENDIF
  500 CONTINUE
C === COMPUTE D(N-1) - D(N-2) AND STORE IT IN DC AND DO AND DOC
#if defined (BIT64)
      CALL CAXPY(NBHTC,(-1.0E0,0E0),FC,1,DC,1)
      CALL CAXPY(NBHTO,(-1.0E0,0E0),FO,1,DO,1)
      CALL CAXPY(NBHTO2,(-1.0E0,0E0),FOC,1,DOC,1)
#else
      CALL ZAXPY(NBHTC,(-1.0D0,0D0),FC,1,DC,1)
      CALL ZAXPY(NBHTO,(-1.0D0,0D0),FO,1,DO,1)
      CALL ZAXPY(NBHTO2,(-1.0D0,0D0),FOC,1,DOC,1)
#endif
C === AND COMPUTE THE FINAL NEW DENSITY IN SC1 AND SC2 AND SC3
      CMULC = XXX
#if defined (BIT64)
      CALL CAXPY(NBHTC,CMULC,DC,1,SC1,1)
      CALL CAXPY(NBHTO,CMULC,DO,1,SC2,1)
      CALL CAXPY(NBHTO2,CMULC,DOC,1,SC3,1)
#else
      CALL ZAXPY(NBHTC,CMULC,DC,1,SC1,1)
      CALL ZAXPY(NBHTO,CMULC,DO,1,SC2,1)
      CALL ZAXPY(NBHTO2,CMULC,DOC,1,SC3,1)
#endif
      ENDIF
C
C === LET'S WRITE THE NEW DENSITY TO MFDDENSM
C
      IPOINT = 0
      WRITE(6,1000) ITYPE
 1000 FORMAT(//,I3,' POINT EXTRAPOLATION PERFORMED.',//)
      ICTC = 1
      ICTO = 1
      DO 600 IRP = 1, NSYMRP
      NBS = NBSIM (IRP) * (NBSIM (IRP) + 1) / 2
      IF (NCL(IRP) .NE. 0) THEN
      CALL WDENS(IRECDC,SC1(ICTC),NBS,IRP,1)
      ICTC = ICTC + NBS
      ENDIF
      IF (NOP(IRP,1) .NE. 0) THEN
      CALL WDENS(IRECDC,SC2(ICTO),NBS,IRP,2)
      ICTO = ICTO + NBS
      ENDIF
      IF (NOP(IRP,2) .NE. 0) THEN
      CALL WDENS(IRECDC,SC3(ICTO2),NBS,IRP,3)
      ICTO2 = ICTO2 + NBS
      ENDIF
  600 CONTINUE
C
 9999 CONTINUE     
      RETURN
      END
